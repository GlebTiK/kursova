/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables.records;


import kpi.hlibsukhoruchkin.kursova.jooq.tables.Shows;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShowsRecord extends UpdatableRecordImpl<ShowsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>kursova.shows.ShowID</code>.
     */
    public void setShowid(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>kursova.shows.ShowID</code>.
     */
    public ULong getShowid() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>kursova.shows.ShowName</code>.
     */
    public void setShowname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>kursova.shows.ShowName</code>.
     */
    public String getShowname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>kursova.shows.ChannelID</code>.
     */
    public void setChannelid(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>kursova.shows.ChannelID</code>.
     */
    public ULong getChannelid() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>kursova.shows.Active</code>.
     */
    public void setActive(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>kursova.shows.Active</code>.
     */
    public Byte getActive() {
        return (Byte) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShowsRecord
     */
    public ShowsRecord() {
        super(Shows.SHOWS);
    }

    /**
     * Create a detached, initialised ShowsRecord
     */
    public ShowsRecord(ULong showid, String showname, ULong channelid, Byte active) {
        super(Shows.SHOWS);

        setShowid(showid);
        setShowname(showname);
        setChannelid(channelid);
        setActive(active);
        resetChangedOnNotNull();
    }
}
