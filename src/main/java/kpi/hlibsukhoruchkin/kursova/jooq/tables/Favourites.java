/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kpi.hlibsukhoruchkin.kursova.jooq.Keys;
import kpi.hlibsukhoruchkin.kursova.jooq.Kursova;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Shows.ShowsPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Users.UsersPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.records.FavouritesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Favourites extends TableImpl<FavouritesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kursova.favourites</code>
     */
    public static final Favourites FAVOURITES = new Favourites();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FavouritesRecord> getRecordType() {
        return FavouritesRecord.class;
    }

    /**
     * The column <code>kursova.favourites.UserID</code>.
     */
    public final TableField<FavouritesRecord, ULong> USERID = createField(DSL.name("UserID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>kursova.favourites.ShowID</code>.
     */
    public final TableField<FavouritesRecord, ULong> SHOWID = createField(DSL.name("ShowID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private Favourites(Name alias, Table<FavouritesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Favourites(Name alias, Table<FavouritesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kursova.favourites</code> table reference
     */
    public Favourites(String alias) {
        this(DSL.name(alias), FAVOURITES);
    }

    /**
     * Create an aliased <code>kursova.favourites</code> table reference
     */
    public Favourites(Name alias) {
        this(alias, FAVOURITES);
    }

    /**
     * Create a <code>kursova.favourites</code> table reference
     */
    public Favourites() {
        this(DSL.name("favourites"), null);
    }

    public <O extends Record> Favourites(Table<O> path, ForeignKey<O, FavouritesRecord> childPath, InverseForeignKey<O, FavouritesRecord> parentPath) {
        super(path, childPath, parentPath, FAVOURITES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FavouritesPath extends Favourites implements Path<FavouritesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FavouritesPath(Table<O> path, ForeignKey<O, FavouritesRecord> childPath, InverseForeignKey<O, FavouritesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FavouritesPath(Name alias, Table<FavouritesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FavouritesPath as(String alias) {
            return new FavouritesPath(DSL.name(alias), this);
        }

        @Override
        public FavouritesPath as(Name alias) {
            return new FavouritesPath(alias, this);
        }

        @Override
        public FavouritesPath as(Table<?> alias) {
            return new FavouritesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kursova.KURSOVA;
    }

    @Override
    public UniqueKey<FavouritesRecord> getPrimaryKey() {
        return Keys.KEY_FAVOURITES_PRIMARY;
    }

    @Override
    public List<ForeignKey<FavouritesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FAVOURITES_USERS_FK, Keys.FAVOURITES_SHOWS_FK);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>kursova.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FAVOURITES_USERS_FK, null);

        return _users;
    }

    private transient ShowsPath _shows;

    /**
     * Get the implicit join path to the <code>kursova.shows</code> table.
     */
    public ShowsPath shows() {
        if (_shows == null)
            _shows = new ShowsPath(this, Keys.FAVOURITES_SHOWS_FK, null);

        return _shows;
    }

    @Override
    public Favourites as(String alias) {
        return new Favourites(DSL.name(alias), this);
    }

    @Override
    public Favourites as(Name alias) {
        return new Favourites(alias, this);
    }

    @Override
    public Favourites as(Table<?> alias) {
        return new Favourites(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(String name) {
        return new Favourites(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(Name name) {
        return new Favourites(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Favourites rename(Table<?> name) {
        return new Favourites(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites where(Condition condition) {
        return new Favourites(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Favourites where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Favourites where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Favourites where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Favourites where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Favourites whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
