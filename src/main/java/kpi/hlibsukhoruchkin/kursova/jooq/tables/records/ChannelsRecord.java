/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables.records;


import kpi.hlibsukhoruchkin.kursova.jooq.tables.Channels;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChannelsRecord extends UpdatableRecordImpl<ChannelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>kursova.channels.ChannelID</code>.
     */
    public void setChannelid(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>kursova.channels.ChannelID</code>.
     */
    public ULong getChannelid() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>kursova.channels.ChannelName</code>.
     */
    public void setChannelname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>kursova.channels.ChannelName</code>.
     */
    public String getChannelname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>kursova.channels.Active</code>.
     */
    public void setActive(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>kursova.channels.Active</code>.
     */
    public Byte getActive() {
        return (Byte) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChannelsRecord
     */
    public ChannelsRecord() {
        super(Channels.CHANNELS);
    }

    /**
     * Create a detached, initialised ChannelsRecord
     */
    public ChannelsRecord(ULong channelid, String channelname, Byte active) {
        super(Channels.CHANNELS);

        setChannelid(channelid);
        setChannelname(channelname);
        setActive(active);
        resetChangedOnNotNull();
    }
}
