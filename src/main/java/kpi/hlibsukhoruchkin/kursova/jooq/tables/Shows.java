/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kpi.hlibsukhoruchkin.kursova.jooq.Keys;
import kpi.hlibsukhoruchkin.kursova.jooq.Kursova;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Channels.ChannelsPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Favourites.FavouritesPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Schedule.SchedulePath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Users.UsersPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.records.ShowsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shows extends TableImpl<ShowsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kursova.shows</code>
     */
    public static final Shows SHOWS = new Shows();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShowsRecord> getRecordType() {
        return ShowsRecord.class;
    }

    /**
     * The column <code>kursova.shows.ShowID</code>.
     */
    public final TableField<ShowsRecord, ULong> SHOWID = createField(DSL.name("ShowID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>kursova.shows.ShowName</code>.
     */
    public final TableField<ShowsRecord, String> SHOWNAME = createField(DSL.name("ShowName"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>kursova.shows.ChannelID</code>.
     */
    public final TableField<ShowsRecord, ULong> CHANNELID = createField(DSL.name("ChannelID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>kursova.shows.Active</code>.
     */
    public final TableField<ShowsRecord, Byte> ACTIVE = createField(DSL.name("Active"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    private Shows(Name alias, Table<ShowsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Shows(Name alias, Table<ShowsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kursova.shows</code> table reference
     */
    public Shows(String alias) {
        this(DSL.name(alias), SHOWS);
    }

    /**
     * Create an aliased <code>kursova.shows</code> table reference
     */
    public Shows(Name alias) {
        this(alias, SHOWS);
    }

    /**
     * Create a <code>kursova.shows</code> table reference
     */
    public Shows() {
        this(DSL.name("shows"), null);
    }

    public <O extends Record> Shows(Table<O> path, ForeignKey<O, ShowsRecord> childPath, InverseForeignKey<O, ShowsRecord> parentPath) {
        super(path, childPath, parentPath, SHOWS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShowsPath extends Shows implements Path<ShowsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShowsPath(Table<O> path, ForeignKey<O, ShowsRecord> childPath, InverseForeignKey<O, ShowsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShowsPath(Name alias, Table<ShowsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShowsPath as(String alias) {
            return new ShowsPath(DSL.name(alias), this);
        }

        @Override
        public ShowsPath as(Name alias) {
            return new ShowsPath(alias, this);
        }

        @Override
        public ShowsPath as(Table<?> alias) {
            return new ShowsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kursova.KURSOVA;
    }

    @Override
    public Identity<ShowsRecord, ULong> getIdentity() {
        return (Identity<ShowsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShowsRecord> getPrimaryKey() {
        return Keys.KEY_SHOWS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShowsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SHOWS_SHOWS_UNIQUE);
    }

    @Override
    public List<ForeignKey<ShowsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHOWS_CHANNELS_FK);
    }

    private transient ChannelsPath _channels;

    /**
     * Get the implicit join path to the <code>kursova.channels</code> table.
     */
    public ChannelsPath channels() {
        if (_channels == null)
            _channels = new ChannelsPath(this, Keys.SHOWS_CHANNELS_FK, null);

        return _channels;
    }

    private transient FavouritesPath _favourites;

    /**
     * Get the implicit to-many join path to the <code>kursova.favourites</code>
     * table
     */
    public FavouritesPath favourites() {
        if (_favourites == null)
            _favourites = new FavouritesPath(this, null, Keys.FAVOURITES_SHOWS_FK.getInverseKey());

        return _favourites;
    }

    private transient SchedulePath _schedule;

    /**
     * Get the implicit to-many join path to the <code>kursova.schedule</code>
     * table
     */
    public SchedulePath schedule() {
        if (_schedule == null)
            _schedule = new SchedulePath(this, null, Keys.SCHEDULE_SHOWS_FK.getInverseKey());

        return _schedule;
    }

    /**
     * Get the implicit many-to-many join path to the <code>kursova.users</code>
     * table
     */
    public UsersPath users() {
        return favourites().users();
    }

    @Override
    public Shows as(String alias) {
        return new Shows(DSL.name(alias), this);
    }

    @Override
    public Shows as(Name alias) {
        return new Shows(alias, this);
    }

    @Override
    public Shows as(Table<?> alias) {
        return new Shows(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shows rename(String name) {
        return new Shows(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shows rename(Name name) {
        return new Shows(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shows rename(Table<?> name) {
        return new Shows(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows where(Condition condition) {
        return new Shows(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shows where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shows where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shows where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Shows where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Shows whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
