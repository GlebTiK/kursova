/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kpi.hlibsukhoruchkin.kursova.jooq.Keys;
import kpi.hlibsukhoruchkin.kursova.jooq.Kursova;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Favourites.FavouritesPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Roles.RolesPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Sessions.SessionsPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Shows.ShowsPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.records.UsersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kursova.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>kursova.users.Login</code>.
     */
    public final TableField<UsersRecord, String> LOGIN = createField(DSL.name("Login"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>kursova.users.PasswordHash</code>.
     */
    public final TableField<UsersRecord, String> PASSWORDHASH = createField(DSL.name("PasswordHash"), SQLDataType.VARCHAR(72).nullable(false), this, "");

    /**
     * The column <code>kursova.users.UserID</code>.
     */
    public final TableField<UsersRecord, ULong> USERID = createField(DSL.name("UserID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>kursova.users.RoleID</code>.
     */
    public final TableField<UsersRecord, ULong> ROLEID = createField(DSL.name("RoleID"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("1", SQLDataType.BIGINTUNSIGNED)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kursova.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>kursova.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>kursova.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kursova.KURSOVA;
    }

    @Override
    public Identity<UsersRecord, ULong> getIdentity() {
        return (Identity<UsersRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_ROLES_FK);
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>kursova.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.USERS_ROLES_FK, null);

        return _roles;
    }

    private transient FavouritesPath _favourites;

    /**
     * Get the implicit to-many join path to the <code>kursova.favourites</code>
     * table
     */
    public FavouritesPath favourites() {
        if (_favourites == null)
            _favourites = new FavouritesPath(this, null, Keys.FAVOURITES_USERS_FK.getInverseKey());

        return _favourites;
    }

    private transient SessionsPath _sessions;

    /**
     * Get the implicit to-many join path to the <code>kursova.sessions</code>
     * table
     */
    public SessionsPath sessions() {
        if (_sessions == null)
            _sessions = new SessionsPath(this, null, Keys.SESSIONS_USERS_FK.getInverseKey());

        return _sessions;
    }

    /**
     * Get the implicit many-to-many join path to the <code>kursova.shows</code>
     * table
     */
    public ShowsPath shows() {
        return favourites().shows();
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
