/*
 * This file is generated by jOOQ.
 */
package kpi.hlibsukhoruchkin.kursova.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import kpi.hlibsukhoruchkin.kursova.jooq.Keys;
import kpi.hlibsukhoruchkin.kursova.jooq.Kursova;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.Users.UsersPath;
import kpi.hlibsukhoruchkin.kursova.jooq.tables.records.SessionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sessions extends TableImpl<SessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kursova.sessions</code>
     */
    public static final Sessions SESSIONS = new Sessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionsRecord> getRecordType() {
        return SessionsRecord.class;
    }

    /**
     * The column <code>kursova.sessions.UserID</code>.
     */
    public final TableField<SessionsRecord, ULong> USERID = createField(DSL.name("UserID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>kursova.sessions.Token</code>.
     */
    public final TableField<SessionsRecord, String> TOKEN = createField(DSL.name("Token"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>kursova.sessions.ExpireDate</code>.
     */
    public final TableField<SessionsRecord, LocalDateTime> EXPIREDATE = createField(DSL.name("ExpireDate"), SQLDataType.LOCALDATETIME(0), this, "");

    private Sessions(Name alias, Table<SessionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kursova.sessions</code> table reference
     */
    public Sessions(String alias) {
        this(DSL.name(alias), SESSIONS);
    }

    /**
     * Create an aliased <code>kursova.sessions</code> table reference
     */
    public Sessions(Name alias) {
        this(alias, SESSIONS);
    }

    /**
     * Create a <code>kursova.sessions</code> table reference
     */
    public Sessions() {
        this(DSL.name("sessions"), null);
    }

    public <O extends Record> Sessions(Table<O> path, ForeignKey<O, SessionsRecord> childPath, InverseForeignKey<O, SessionsRecord> parentPath) {
        super(path, childPath, parentPath, SESSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SessionsPath extends Sessions implements Path<SessionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SessionsPath(Table<O> path, ForeignKey<O, SessionsRecord> childPath, InverseForeignKey<O, SessionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SessionsPath(Name alias, Table<SessionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SessionsPath as(String alias) {
            return new SessionsPath(DSL.name(alias), this);
        }

        @Override
        public SessionsPath as(Name alias) {
            return new SessionsPath(alias, this);
        }

        @Override
        public SessionsPath as(Table<?> alias) {
            return new SessionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Kursova.KURSOVA;
    }

    @Override
    public UniqueKey<SessionsRecord> getPrimaryKey() {
        return Keys.KEY_SESSIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<SessionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SESSIONS_USERS_FK);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>kursova.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.SESSIONS_USERS_FK, null);

        return _users;
    }

    @Override
    public Sessions as(String alias) {
        return new Sessions(DSL.name(alias), this);
    }

    @Override
    public Sessions as(Name alias) {
        return new Sessions(alias, this);
    }

    @Override
    public Sessions as(Table<?> alias) {
        return new Sessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(String name) {
        return new Sessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Name name) {
        return new Sessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Table<?> name) {
        return new Sessions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition condition) {
        return new Sessions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
